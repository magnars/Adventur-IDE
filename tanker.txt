
Hva skal jeg velge som neste? Krav? Selection? Mouse? Skrivefeil?

--------------------

Selection:
  Cursor får en selectionOrigin
  Selection bruker Document med sin lines og Cursor
   - har selectionStart og selectionEnd, der den ene er cursor (avhengig av om Cursor er først eller sist)
  PageEditor og RoomEditor fjerner selection ved endring.
  TextEditor har ctrl+c/v/x og fikser alt med selection.
  PageRenderer tar selection og formatterer (husk å fjerne annen formattering på linjene)

--------------------

Mouse:
  Regn ut hvilken linje vha fontHeight
  Regn ut hvilket tegn vha fontMetrics --> cursor-posisjon! No problem.
  Klikke på lyspærer og blyanter er temmelig enkelt etter det.
  Select er kjipere, med drag og greier.

--------------------

* Husk at Prose i gammel form skal være på en lang linje.
  Hmm ... [C] og alternativer kan selv si ifra til Prose om å rendre seg som én lang linje, de andre kan fortsette å bruke prose som før.

* Prose takler for øyeblikket dårlig lange linjer fra gammel editor som inneholder ekstra spacing for å få 80-char linjer

* Husk ´ og é i KeyInterpreter

--------------------

Burde samle alle fargene i en klasse, slik at jeg kan få meg en fin beksvart skjerm om jeg skulle ønske det.

--------------------

Jeg har hatt litt problemer med å se prosessen. Slik er den:

1. Det finnes et Room med tekstlinjer med en cursor. Dette er utgangspunktet og starten på flyten.
2. Room må vises fram. Hvordan? Det vet Page, ved hjelp av Commands. Linjene parses til Commands.
3. Commands blir bedt om å rendre seg selv. De lager formatterte linjer som matcher linjene i dokumentet.
4. De formatterte linjene blir rendret.
5. Editoren lytter etter endringer. Når de kommer så gjøres endringer i tekstdokumentet. Dette via Document, som har ansvar for å at cursor-posisjon er bra.
6. Endringene fra Document går til Room, som så starter prosessen på nytt.

Altså, skrevet med litt andre ord:

1. Vent på Event. (kan være endring fra TextEditor, PageEditor eller Application (ved første åpning))
2. Eventen sender et Room. Den har name, file, lines og cursor. Observer at dette er enkle objecter. String, File, List<String>, [int, int]
3. En Page lages ut fra Room. Den oppretter Document som brukes til å lage Commands, for å holde oversikt.
4. Page brukes av PageFormatter til å lage formattere linjer for rendring.
5. TextEditor (vha Document) og PageEditor (vha Page) tolker tastetrykkene som kommer og gjør endringer.
6. Room får oppdatert sin lines og cursor.
7. Endring rapporteres.

------------------

Commands vet alt om kommandoene i Adventur. De kan rendre seg som ny og som gammel, og vet hvor de kan finne
romnummer og krav. De endrer ikke på dokumenter uten å bli bedt om det.
De kan svare på "er dette den gamle eller nye formen?", slik at editoren kan la deg trykke cmd+f for å endre til ny form.

Det gjøres bare automatisk konvertering til newScript ved innlasting av rom.

Commands får altså fortsatt et DocumentFragment som er sitt eget. Også bruker de det til å finne sine romnummer og krav.

Editor spør kommando:
  "Hei, inneholder du noen romnummer?" --> er cursoren der nå? Vis info om rom
  "Hei, inneholder du noen krav?" --> er cursoren der nå? Vis info om krav
  "Hei, inneholder du noen feil?" --> er cursoren der nå? Vis info om feil  --> vis advarselstrekant
  "Hei, kan du oppgraderes til ny form?" --> vis lyspære   ---.__ ctrl+f = fiks
  "Hei, inneholder du noen skrivefeil?" --> vis blyant ---'

-------------------

Istedet for automatisk fiksing mens du skriver, så vil jeg ha små lyspærer i margen som ordner.

--------------------

Room holdes åpne i Adventure (og RoomHistory).
  - Det er en måte å beholde cursor-posisionen.
  - Da er det teoretisk mulig å la spilleren hoppe fram og tilbake mellom rommene uten å lagre.
    Er det ålreit? Jeg er veldig usikker. Da nærmer vi oss mer normal dokumenthåndtering, med tabs og skit.
    Da føler jeg at fokus forsvinner.

--------------------

Command får et DocumentFragment
   - et DocumentFragment er et view inn i dokumentet
   - med en offset og en lengde
   - når dokumentet endres, oppdaterer den tilkoblede fragmenter
   - DocumentFragment tilbyr metoder for å endre teksten
      - oversettes til Document-index og sendes rett videre

--------------------

En paragraf representeres med ':'
  - en paragraf med cursor på linja er uten ':'
  - en paragraf på øverste nivå er uten ':'

---------------------

 TextRenderer vet ikke om annet enn rendring. Tar bare imot en rekke linjer og en cursor.

 TextEditor kjenner til et document, som består av tekst og en cursor. Vet ingenting annet.
 PageEditor har en Page, kjenner til Commands, og er mer opptatt av domenet. Delegerer videre til TextEditor.
 RoomEditor kjenner til Rooms, kan lagre dem, undo, redo, hoppe mellom, etc. Delegerer videre til PageEditor.

-------------------

 Kommandoen har flere roller:
   - static: parse tekst til seg selv (old + new)
   - rendre seg som i ny og gammel form
   - vite hvilke romnummer og krav som er i teksten sin

[Y] + [X] kan løses ved at de vet om hverandre
 - ved rendring av Lines, sender [Y] en tom array hvis den er helt standard

---------------------

Vanlig skrivefeil for Grethe:   "Ingen tvil om det"; tenker du.   ; --> ,
Vanlig skrivefeil: Alternativ som begynner eller slutter med " uten å ha noen flere

---------------------

Document testes gjennom tre forskjellige klasser:
   - DocumentTest bryr seg først og fremst om at cursoren oppdateres riktig når teksten endres.
   - DocumentFragmentTest sjekker grunnfunksjonalitet når den tester integrasjon, samt oppdatering av Fragments.
   - EditorTest sjekker at de "lettere abstrakte" Document-metodene mapper godt over til lettforståelige tastetrykk.

---------------------

* Vurdere et felles repo for romnummer ... hva da med offline? hver bruker kan få tildelt 300 nummer i slengen, og kontakter
  repo for nye nummer når den bare har 100 igjen. Ikke lengre noe gjenbruk av romnummer.

