
Nå: nesting

--> fragment sin cursor

--> fragments med x-komponent? må nok det ja. startY -> offset: [x, y]

For at typ [C] skal fungere riktig må Prose stacke seg opp på en linje i gammel form.
Dermed er nesting ikke bundet til typ [!], men rett på brackets.
Typ [!] vil fortsatt ha en command, men det kan være en CommandBlock

en blokket kommando grabber alt den ønsker seg vha numLines
lager en CommandBlock, sitt eget DocumentFragment og sin egen CommandParser
bruker disse for å snakke med omverdenen

Dvs at Document og DocumentFragment må ha samme API
  --> DocumentFragments delegerer fortsatt alt rett videre til Document

--------------------

Kan vurdere å eksponere metoder fra commands og document i page, slik at vi slipper page.commands.justifyProse() et al

--------------------

Husk at Prose i gammel form skal være på en lang linje.

--------------------

Jeg har hatt litt problemer med å se prosessen. Slik er den:

1. Det finnes et Room med tekstlinjer med en cursor. Dette er utgangspunktet og starten på flyten.
2. Room må vises fram. Hvordan? Det vet Page, ved hjelp av Commands. Linjene parses til Commands.
3. Commands blir bedt om å rendre seg selv. De lager formatterte linjer som matcher linjene i dokumentet.
4. De formatterte linjene blir rendret.
5. Editoren lytter etter endringer. Når de kommer så gjøres endringer i tekstdokumentet. Dette via Document, som har ansvar for å at cursor-posisjon er bra.
6. Endringene fra Document går til Room, som så starter prosessen på nytt.

Altså, skrevet med litt andre ord:

1. Vent på Event. (kan være endring fra TextEditor, PageEditor eller Application (ved første åpning))
2. Eventen sender et Room. Den har name, file, lines og cursor. Observer at dette er enkle objecter. String, File, List<String>, [int, int]
3. En Page lages ut fra Room. Den oppretter Document som brukes til å lage Commands, for å holde oversikt.
4. Page brukes av PageFormatter til å lage formattere linjer for rendring.
5. TextEditor (vha Document) og PageEditor (vha Page) tolker tastetrykkene som kommer og gjør endringer.
6. Room får oppdatert sin lines og cursor.
7. Endring rapporteres.

--------------------

* Fiksing av Page ved førstegangs åpning gjøre av PageReformatter, som også bruker Document og Commands for å gjøre dette.
* En singleton PageHistory tar vare på stacken av sider for rask navigasjon.

--------------------

Jeg skal nok også fjerne håndtering av krav og romnummer fra Commands.
De trenger bare å svare på getRoomNumbers og getRequirements så vil egne klasser håndtere fargelegging av dem.

------------------

Commands vet alt om kommandoene i Adventur. De kan rendre seg som ny og som gammel, og vet hvor de kan finne
romnummer og krav. De endrer ikke på dokumenter uten å bli bedt om det.
De kan svare på "er dette den gamle eller nye formen?", slik at editoren kan la deg trykke cmd+f for å endre til ny form.

Det gjøres bare automatisk konvertering til newScript ved innlasting av rom.

Commands får altså fortsatt et DocumentFragment som er sitt eget. Også bruker de det til å finne
sine romnummer og krav - det har blitt deres nye hovedformål.

Du ber fortsatt Command om å få FormattedLines - men det flyttes opp til Command-superklassen som bare løper
gjennom fragmentet og lager dem ut fra lines.

-------------------

Istedet for automatisk fiksing mens du skriver, så vil jeg ha små lyspærer i margen som ordner.

--------------------

Room holdes åpne i Adventure (og RoomHistory).
  - Det er en måte å beholde cursor-posisionen.
  - Da er det teoretisk mulig å la spilleren hoppe fram og tilbake mellom rommene uten å lagre.
    Er det ålreit? Det tror jeg faktisk. I hvert fall hvis jeg får en oversikt over rom som ikke er lagret.

--------------------

Command får et DocumentFragment
   - et DocumentFragment er et view inn i dokumentet
   - med en offset og en lengde
   - når dokumentet endres, oppdaterer den tilkoblede fragmenter
   - DocumentFragment tilbyr metoder for å endre teksten
      - oversettes til Document-index og sendes rett videre

--------------------

En paragraf representeres med ':'
  - en paragraf med cursor på linja er uten ':'
  - en paragraf på øverste nivå er uten ':'

---------------------

 TextRenderer vet ikke om annet enn rendring. Tar bare imot en rekke linjer og en cursor.

 TextEditor kjenner til et document, som består av tekst og en cursor. Vet ingenting annet.
 PageEditor har en Page, kjenner til Commands, og er mer opptatt av domenet. Delegerer videre til TextEditor.

-------------------

 Kommandoen har flere roller:
   - static: parse tekst til seg selv (old + new)
   - rendre seg som i ny og gammel form
   - vite hvilke romnummer og krav som er i teksten sin

[Y] + [X] kan løses ved at de vet om hverandre
 - ved rendring av Lines, sender [Y] en tom array hvis den er helt standard

---------------------

Vanlig skrivefeil for Grethe:   "Ingen tvil om det"; tenker du.   ; --> ,
Vanlig skrivefeil: Alternativ som begynner eller slutter med " uten å ha noen flere

---------------------

Document testes gjennom tre forskjellige klasser:
   - DocumentTest bryr seg først og fremst om at cursoren oppdateres riktig når teksten endres.
   - DocumentFragmentTest sjekker grunnfunksjonalitet når den tester integrasjon, samt oppdatering av Fragments.
   - EditorTest sjekker at de "lettere abstrakte" Document-metodene mapper godt over til lettforståelige tastetrykk.
