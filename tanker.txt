Neste:
 [ ] getRoomNumbers -> formattere
 [ ] tabbe mellom roomNumbers
 [ ] hoppe til nytt rom

Etter det: nesting --> fragments med x-komponent? må nok det ja. startY -> offset: [x, y]

--------------------

Jeg skal nok også fjerne håndtering av krav og romnummer fra Commands.
De trenger bare å svare på getRoomNumbers og getRequirements med [text, position: [x,y]],
så vil egne klasser håndtere fargelegging av dem.

------------------

Commands vet alt om kommandoene i Adventur. De kan rendre seg som ny og som gammel, og vet hvor de kan finne
romnummer og krav. De endrer ikke på dokumenter uten å bli bedt om det.
De kan svare på "er dette den gamle eller nye formen?", slik at editoren kan la deg trykke ctrl+space for å endre til ny form.

Det gjøres bare automatisk konvertering til newScript ved innlasting av rom.

Commands får altså fortsatt et DocumentFragment som er sitt eget. Også bruker de det til å finne
sine romnummer og krav - det har blitt deres nye hovedformål.

Du ber fortsatt Command om å få FormattedLines - men det flyttes opp til Command-superklassen som bare løper
gjennom fragmentet og lager dem ut fra lines.

-------------------

- et romnummers oppførsel (som at det er rødt) hører ikke hjemme i RemovedAlternativeCommand

--------------------

Istedet for automatisk fiksing mens du skriver, så vil jeg ha små lyspærer i margen som ordner.

--------------------

Page har Document:
  - Det er en måte å beholde cursor-posisionen.
  - Da kan man hoppe til et annet rom uten å lagre ... feature? tror det føles som bug

--------------------

Command får ikke List<String> lines
- den får istedet et DocumentFragment
   - et DocumentFragment er et view inn i dokumentet
   - med en index og en lengde
   - når dokumentet endres, oppdaterer den tilkoblede fragmenter
   - DocumentFragment tilbyr metoder for å endre teksten
      - oversettes til Document-index og sendes rett videre

--------------------

En paragraf representeres med ':'
  - en paragraf med cursor på linja er uten ':'
  - en paragraf på øverste nivå er uten ':'


---------------------

 TextRenderer vet ikke om annet enn rendring. Tar bare imot en rekke linjer og en cursor.

 Application åpner vinduet, instansierer Editor og View. Lytter på events.
   Tastetrykk sendes til Editor.

 En Page har et nummer, kan lagres, inneholder Commands.

 TextLayout er en liste med Line som består av Text, sendes til View for rendring sammen med Cursor

 TextEditor kjenner til et document, som består av tekst og en cursor. Vet ingenting annet.
 PageEditor har en Page, kjenner til Commands, og er mer opptatt av domenet. Delegerer videre til TextEditor.

-------------------

 Kommandoen har flere roller:
   - static: parse tekst til seg selv (old + new)
   - rendre seg som tekst (old script)
   - rendre seg som Line (new script)

[Y] + [X] kan løses ved at de vet om hverandre
 - ved rendring av Lines, sender [Y] en tom array hvis den er helt standard

---------------------

Vanlig skrivefeil for Grethe:   "Ingen tvil om det"; tenker du.   ; --> ,

---------------------

Ettersom jeg kaster alle Commands og parser hele teksten på nytt når brukeren gjør endringer,
så legger det føringer for hvordan DocumentFragments brukes. De må nemlig cleares hver gang
jeg parser, for at ikke utdaterte Commands skal leve videre i en grotesk vandød tilstand.

---------------------

Document testes gjennom tre forskjellige klasser:
   - DocumentTest bryr seg først og fremst om at cursoren oppdateres riktig når teksten endres.
   - DocumentFragmentTest sjekker grunnfunksjonalitet når den tester integrasjon, samt oppdatering av Fragments.
   - EditorTest sjekker at de "lettere abstrakte" Document-metodene mapper godt over til lettforståelige tastetrykk.
